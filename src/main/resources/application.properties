spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.auto-offset-reset=earliest

campaign.url = ${CAMPAIGN_URL}

# Kafka
spring.kafka.bootstrap-servers=${BOOTSTRAP_SERVERS}
spring.kafka.properties.schema.registry.url=${REGISTRY_URL}
spring.kafka.consumer.enable-auto-commit=true
auto.commit.interval.ms=2000
campaign=${KAFKA_CAMPAIGN_TOPIC}
inboundUnprocessed=${KAFKA_INBOUND_UNPROCESSED_TOPIC}
inboundProcessed=${KAFKA_INBOUND_PROCESSED_TOPIC}
gupshup-opted-out=${KAFKA_INBOUND_GS_OPTED_OUT_TOPIC}
inbound-error=${KAFKA_INBOUND_ERROR_TOPIC}
kafka.logs.topic=logs
outbound=${KAFKA_OUTBOUND_TOPIC}

server.port=9090
spring.liquibase.enabled=false

# Cassandra
spring.data.cassandra.contactpoints=${CASSANDRA_URL}
spring.data.cassandra.port=${CASSANDRA_PORT}
spring.data.cassandra.keyspace-name=${CASSANDRA_KEYSPACE}
spring.data.cassandra.local-datacenter=datacenter1
logging.level.root=INFO
spring.data.cassandra.pool.heartbeat-interval=30s
spring.data.cassandra.pool.max-queue-size=2000
spring.data.cassandra.pool.idle-timeout=10s
spring.data.cassandra.pool.pool-timeout=1s

fusionauth.url = ${FUSIONAUTH_URL}
fusionauth.key = ${FUSIONAUTH_KEY}

encryptionKeyString=A%C*F-JaNdRgUkXp
campaign.admin.token=EXnYOvDx4KFqcQkdXqI38MHgFvnJcxMS

netcore.whatsap.auth.token=${NETCORE_WHATSAPP_AUTH_TOKEN}
netcore.whatsapp.source=${NETCORE_WHATSAPP_SOURCE}
netcore.whatsapp.uri=${NETCORE_WHATSAPP_URI}

spring.r2dbc.url=r2dbc:${FORMS_DB_URL}
postgresql.db.host=${FORMS_DB_HOST}
postgresql.db.port=${FORMS_DB_PORT}
spring.r2dbc.name=${FORMS_DB_NAME}
spring.r2dbc.username=${FORMS_DB_USERNAME}
spring.r2dbc.password=${FORMS_DB_PASSWORD}

#Caffeine Cache
#caffeine.cache.max.size=${CAFFEINE_CACHE_MAX_SIZE:#{1000}}
caffeine.cache.max.size=0
caffeine.cache.exprie.duration.seconds=${CAFFEINE_CACHE_EXPIRE_DURATION:#{300}}

#Opentelemetry Lighstep Config
opentelemetry.lightstep.tracer=${OPENTELEMETERY_LIGHTSTEP_TRACER}
opentelemetry.lightstep.tracer.version=${OPENTELEMETERY_LIGHTSTEP_TRACER_VERSION}
opentelemetry.lightstep.service=${OPENTELEMETERY_LIGHTSTEP_SERVICE}
opentelemetry.lightstep.access.token=${OPENTELEMETERY_LIGHTSTEP_ACCESS_TOKEN}
opentelemetry.lightstep.end.point=${OPENTELEMETERY_LIGHTSTEP_END_POINT}

#Sunbird Adapater Outbound URL
adapter.sunbird.transport.url=${TRANSPORT_SOCKET_BASE_URL}

#Redis
spring.redis.database=${REDIS_DB_INDEX}
spring.redis.host=${REDIS_HOST}
spring.redis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.pool.max-idle=8 # Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
spring.redis.port=${REDIS_PORT}
spring.redis.sentinel.master= # Name of Redis server.
spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.
spring.redis.timeout=0

#Env
spring.profile.env=${ENV}

#CDN Minio
cdn.minio.login.id=loginId
cdn.minio.password=pass
cdn.minio.application.id=2011a6c9-7fb7-4306-8c6d-c96cb07c7812
cdn.minio.bucket.id=bucketId
cdn.minio.url=https://cdn.samagra.io/
